{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Hossam\\\\Desktop\\\\fetchexample\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Hossam\\\\Desktop\\\\fetchexample\\\\src\\\\Component\\\\FetchingData2.js\";\nimport React, { useReducer, useEffect } from 'react';\nimport axios from 'axios';\nconst initialState = {\n  loading: true,\n  error: '',\n  post: {}\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'FETCH_SUCCESS':\n      return {\n        loading: false,\n        post: action.payload,\n        error: ''\n      };\n\n    case 'FETCH_ERROR':\n      return {\n        loading: false,\n        post: {},\n        error: 'Something went Wrong!'\n      };\n\n    default:\n      return state;\n  }\n};\n\nfunction FetchingData2() {\n  const _useReducer = useReducer(reducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  useEffect(() => {\n    Axios.get('https://jsonplaceholder.typicode.com/posts/1').then(response => {\n      dispatch({\n        type: 'FETCH_SUCCESS',\n        payload: response.data\n      });\n    }).catch(error => {\n      dispatch({\n        type: 'FETCH_ERROR'\n      });\n    });\n  }, []);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, state.loading ? 'Loading' : state.post.title, state.error ? error : null);\n}\n\nexport default FetchingData2;","map":{"version":3,"sources":["C:/Users/Hossam/Desktop/fetchexample/src/Component/FetchingData2.js"],"names":["React","useReducer","useEffect","axios","initialState","loading","error","post","reducer","state","action","type","payload","FetchingData2","dispatch","Axios","get","then","response","data","catch","title"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,IADQ;AAEjBC,EAAAA,KAAK,EAAE,EAFU;AAGjBC,EAAAA,IAAI,EAAE;AAHW,CAArB;;AAMA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/B,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,eAAL;AACI,aAAO;AACHN,QAAAA,OAAO,EAAE,KADN;AAEHE,QAAAA,IAAI,EAAEG,MAAM,CAACE,OAFV;AAGHN,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAKJ,SAAK,aAAL;AACI,aAAO;AACHD,QAAAA,OAAO,EAAE,KADN;AAEHE,QAAAA,IAAI,EAAE,EAFH;AAGHD,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAMJ;AAAS,aAAOG,KAAP;AAdb;AAiBH,CAlBD;;AAmBA,SAASI,aAAT,GAAyB;AAAA,sBACKZ,UAAU,CAACO,OAAD,EAAUJ,YAAV,CADf;AAAA;AAAA,QACdK,KADc;AAAA,QACPK,QADO;;AAErBZ,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,KAAK,CAACC,GAAN,CAAU,8CAAV,EACKC,IADL,CACUC,QAAQ,IAAI;AACdJ,MAAAA,QAAQ,CAAC;AAAEH,QAAAA,IAAI,EAAE,eAAR;AAAyBC,QAAAA,OAAO,EAAEM,QAAQ,CAACC;AAA3C,OAAD,CAAR;AACH,KAHL,EAIKC,KAJL,CAIWd,KAAK,IAAI;AACZQ,MAAAA,QAAQ,CAAC;AAAEH,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACH,KANL;AAOH,GARQ,EAQN,EARM,CAAT;AASA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKF,KAAK,CAACJ,OAAN,GAAgB,SAAhB,GAA4BI,KAAK,CAACF,IAAN,CAAWc,KAD5C,EAEKZ,KAAK,CAACH,KAAN,GAAcA,KAAd,GAAsB,IAF3B,CADJ;AAMH;;AAED,eAAeO,aAAf","sourcesContent":["import React, { useReducer, useEffect } from 'react'\r\nimport axios from 'axios'\r\nconst initialState = {\r\n    loading: true,\r\n    error: '',\r\n    post: {}\r\n}\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'FETCH_SUCCESS':\r\n            return {\r\n                loading: false,\r\n                post: action.payload,\r\n                error: ''\r\n            }\r\n        case 'FETCH_ERROR':\r\n            return {\r\n                loading: false,\r\n                post: {},\r\n                error: 'Something went Wrong!'\r\n            }\r\n\r\n        default: return state;\r\n\r\n    }\r\n}\r\nfunction FetchingData2() {\r\n    const [state, dispatch] = useReducer(reducer, initialState)\r\n    useEffect(() => {\r\n        Axios.get('https://jsonplaceholder.typicode.com/posts/1')\r\n            .then(response => {\r\n                dispatch({ type: 'FETCH_SUCCESS', payload: response.data })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: 'FETCH_ERROR' })\r\n            })\r\n    }, [])\r\n    return (\r\n        <div>\r\n            {state.loading ? 'Loading' : state.post.title}\r\n            {state.error ? error : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FetchingData2\r\n"]},"metadata":{},"sourceType":"module"}